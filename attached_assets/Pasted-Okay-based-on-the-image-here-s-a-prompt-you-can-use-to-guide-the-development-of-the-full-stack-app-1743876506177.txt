Okay, based on the image, here's a prompt you can use to guide the development of the full-stack application:

## Prompt: Full-Stack Application for Ethiopian Construction Authority Professional Registration

Develop a full-stack web application for the Ethiopian Construction Authority to manage professional registrations. The application should allow users to add new professional records, search for existing records, and potentially export data.

### Functionality:

1.  **Add New Professional Form:**
    *   Implement a React form (styled with CSS) matching the layout and fields in the provided image. The form should include the following fields:
        *   Tracking Number (text input)
        *   Full Name (text input)
        *   Gender (dropdown select with options)
        *   Date of Registration (date picker)
        *   Phone Number (text input)
        *   Professional Title (text input)
        *   Professional Number (text input)
        *   Sector (dropdown select - pre-populated with "construction" as per image but allow for scalability)
        *   Service Type (dropdown select with at least "New" option)
    *   Implement validation on the form to ensure required fields are filled and data is in the correct format.
    *   On submission ("Add Record" button click), the data should be sent to a Node.js/Express backend to be stored in a MySQL database.
2.  **Search Functionality:**
    *   Implement a search bar that allows users to search for professionals by Name or Phone Number.
    *   The search should query the MySQL database via a Node.js/Express API.
    *   Display the search results in a table below the search bar, with columns matching the fields in the "Add New Professional" form.
3.  **Data Display Table:**
    *   Display a table with the following columns: "Actions", "Tracking Number", "Full Name", "Gender", "Date of Registration", "Phone Number", "Professional Title", "Professional Number", "Sector", and "Service Type".
    *   Populate this table with data fetched from the MySQL database via a Node.js/Express API.
    *   Consider pagination for large datasets.
4.  **Backend (Node.js/Express):**
    *   Create a REST API using Node.js and Express.js to handle the following:
        *   Receiving data from the React frontend for new professional records and storing it in the MySQL database.
        *   Querying the MySQL database based on search criteria (name/phone number).
        *   Fetching all professional records from the MySQL database to display in the table.
    *   Implement error handling and validation on the backend.
5.  **Database (MySQL):**
    *   Design a MySQL database table to store the professional registration data.  Ensure the table schema matches the fields in the "Add New Professional" form.
    *   Create appropriate indexes for efficient searching.
6.  **UI Enhancements (Based on Image):**
    *   Implement a "Hide Form" button that toggles the visibility of the "Add New Professional" form.
    *   Implement an "Export CSV" button to export the data from the table (all or search results) into a CSV file.
    *   Implement a light/dark mode toggle.

### Technologies:

*   Frontend: React.js, CSS (or a CSS framework like Tailwind CSS or Material UI)
*   Backend: Node.js, Express.js
*   Database: MySQL
*   ORM/Query Builder (Optional): Sequelize or Knex.js for easier database interaction.

### Styling:

*   Use CSS to style the application to visually resemble the layout and design presented in the image. Pay attention to colors, fonts, and spacing.

### Considerations:

*   **Error Handling:** Implement robust error handling on both the frontend and backend.
*   **Security:** Sanitize user inputs to prevent SQL injection and other security vulnerabilities.
*   **Scalability:** Design the application to be scalable to handle a growing number of professional records.
*   **Accessibility:** Ensure the application is accessible to users with disabilities.

This prompt provides a detailed outline for building the full-stack application based on the provided image. Remember to break down the project into smaller, manageable tasks and test each component thoroughly. Good luck!

Citations:
[1] https://pplx-res.cloudinary.com/image/upload/v1741249565/user_uploads/mHlOsDOYtHDSGed/screencapture-meyota-discreetpinkparrot-cgae-3-web-val-run-2025-02-26-16_09_50.jpg

---
Answer from Perplexity: pplx.ai/share